//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "certificate")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub private_key_id: i32,
    pub pki_id: i32,
    pub pub_key: String,
    pub meta: Json,
    pub expired: bool,
    pub revoked: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PkiId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::private_key::Entity",
        from = "Column::PrivateKeyId",
        to = "super::private_key::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PrivateKey,
    #[sea_orm(has_many = "super::server_certificate::Entity")]
    ServerCertificate,
}

impl Related<super::private_key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PrivateKey.def()
    }
}

impl Related<super::server_certificate::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ServerCertificate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
